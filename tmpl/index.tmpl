{{- define "index" -}}
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>
			Home &ndash; CCA Selection System
		</title>
		<link rel="stylesheet" href="/static/style.css" />
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<style>
				.tp-columns {
					display: flex;
					flex-direction: row;
					@media(max-width: 50rem) {
						flex-wrap: wrap;
						gap: 0rem;
					}
					gap: 2rem;
					align-items: stretch;
				}

				.tp-columns div {
					min-width: 18em;
					/* max-width: 40rem; */
					width: 100%;
					margin-left: auto;
					margin-right: auto;
				}
		</style>
	</head>
	<body>
		<header>
			<div class="header-content">
				<div class="header-left">
					<h1><a id="site-title" href="/">CCA Selection System</a></h1>
				</div>
				<div class="header-middle">
				</div>
				<div class="header-right">
					<p>{{- .user.Name }} ({{ .user.Department -}})</p>
				</div>
			</div>
		</header>
		<noscript>
			<style>
				.script-required {
					display: none
				}
			</style>
			<main>
				<div style="margin: auto; max-width: 30rem; border: solid 2px var(--border); background-color: var(--boxbg); padding: 0rem 1rem;">
				<p>
				Unfortunately, JavaScript is required to use this page.
				</p>

				<p>
				I completely agree that ordinary websites that provide information should not require JavaScript. However, a CCA selection site is not a normal website. It needs to handle 600 people sending it requests at once; it needs to update the vacancy numbers live; it needs to responsively check for course consistencies; it needs to provide client-side search functionality; etc. These are better handled with client-side scripting, and we extensively use WebSocket for scalable communications (i.e. sending a few bytes as commands instead of a full-blown form or AJAX request).
				</p>

				<p>
				The source code of this site is available in a <a href="https://git.sr.ht/~runxiyu/cca">repository on SourceHut</a>. You could also read the JavaScript sent to your browser or something. You could also implement a custom client that speaks the WebSocket-based protocol if interested.
				</p>
				</div>
			</main>
		</noscript>
		<main class="script-required">
		<p>
		Okay I haven&rsquo;t written the web page yet.
		</p>
		</main>
	</body>
</html>
{{- end -}}
